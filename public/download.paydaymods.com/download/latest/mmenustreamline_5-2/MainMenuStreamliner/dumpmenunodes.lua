
-- Determines whether hidden entries should be dumped. If set to true, such entries will be dumped /without/ a preceding comment
-- marker (i.e. the line will /not/ be prefixed with --)
local dump_hidden_entries = false

-- Determines whether entries should have their translated names dumped as well
local dump_translated_names = true

-- Add new entries to dump additional menu nodes. Note that the value 'true' has no meaning - it is used solely to ensure that
-- the entry exists in memory due to the way Lua works
local entries = {
	main = true,
	options = true,
	controls = true,
	video = true,
	adv_video = true,
	sound = true,
	network_options = true,
}

--//////////////////////////////////////////--
--  DO NOT MODIFY ANYTHING BELOW THIS LINE  --
--//////////////////////////////////////////--

local find = string.find
local function IsEntryValidForDumping(entry)
	return entry ~= nil and entry._parameters ~= nil and entry._parameters.name ~= nil and entry._parameters.name ~= "back"and entry._parameters.name ~= "quit" and find(entry._parameters.name, "trial_") == nil and find(entry._parameters.name, "dlc_") == nil
end

-- These callbacks are blacklisted due to them being invalid or referencing objects that are not present at the time of execution
local blacklisted_visibility_callbacks = {
	should_show_old_safehouse = true,
	is_not_crime_spree = true,
	is_crime_spree = true
}

-- Changed from visible_callback_list to visible_callback_name_list due to U110 adding a new
-- MenuCallbackHandler:should_show_old_safehouse() callback. The callback references managers.custom_safehouse, which is nil at
-- the time of execution since managers.menu is initialized before managers.custom_safehouse
local function IsEntryVisible(visible_callback_name_list)
	-- Entries that do not have a _visible_callback_name_list table are always visible
	if visible_callback_name_list == nil or table.size(visible_callback_name_list) < 1 then
		return true
	end

	local MenuCallbackHandler = _G.MenuCallbackHandler
	for __, function_name in ipairs(visible_callback_name_list) do
		if not blacklisted_visibility_callbacks[function_name] then
			local func = MenuCallbackHandler[function_name]
			-- Provide a reference to MenuCallbackHandler as the 'self' argument to emulate a MenuCallbackHandler:function() call
			if func and not func(MenuCallbackHandler) then
				-- Halt immediately if any of the callbacks return false
				return false
			end
		end
	end
	return true
end

Hooks:Add("MenuManagerPostInitialize", "MainMenuStreamliner_Dumper", function(menu_manager)
	if menu_manager == nil or menu_manager._registered_menus == nil or menu_manager._registered_menus.menu_main == nil then
		return
	end

	if MenuCallbackHandler == nil then
		log("[MainMenuStreamliner] FATAL ERROR: MenuCallbackHandler is nil, aborting")
		return
	end

	if MainMenuStreamliner == nil then
		log("[MainMenuStreamliner] FATAL ERROR: MainMenuStreamliner is nil, aborting")
		return
	end

	if dump_translated_names and managers.localization == nil then
		log("[MainMenuStreamliner] Warning: managers.localization is nil, translated names will not be dumped")
		dump_translated_names = false
	end

	local mainmenunodes = menu_manager._registered_menus.menu_main.logic._data._nodes

	local file = io.open(MainMenuStreamliner.NodeConfig, "w")

	if file == nil then
		log("[MainMenuStreamliner] FATAL ERROR: Failed to open \"" .. MainMenuStreamliner.NodeConfig .. "\" for writing")
		return
	end

	file:write("\n-- PAYDAY 2 v" .. tostring(Application:version()) .. " | " .. tostring(os.date("!%d %b %Y, %I:%M %p (UTC)")) .. "\n"
			.. "-- Generated by dumpmenunodes.lua, all modifications to this file will be lost when it is dumped again\n"
			.. "\n-- This determines whether DLC advert entries are hidden (future entries will also be hidden). Set to false to disable this\n"
			.. "-- behavior\n"
			.. "MainMenuStreamliner.HideDLCAds = true\n"
			.. "\n-- To hide a given menu entry, simply delete the preceding -- of the line corresponding to the entry to be hidden\n"
			.. "-- The 'true' value at the end of each entry has no significance, it is merely used to ensure that the entry exists in the table\n"
			.. "-- due to the way Lua works. DLC advert entries are not listed here as there are far too many (use MainMenuStreamliner.HideDLCAds\n"
			.. "-- above instead as that is much more efficient and will work on all entries added in future without requiring additional changes\n"
			.. "-- to be made)\n")

	local first_entry = true
	local first_subentry = true
	local visible = false
	local count = 0
	file:write("\nMainMenuStreamliner.EntriesToHide = {\n")
	for nodename, __ in pairs(entries) do
		if mainmenunodes[nodename] ~= nil and mainmenunodes[nodename]._items ~= nil then
			if not first_entry then
				file:write(",\n")
			else
				first_entry = false
			end
			file:write("\t" .. nodename .. " = {\n")
			first_subentry = true
			for index, entry in ipairs(mainmenunodes[nodename]._items) do
				if IsEntryValidForDumping(entry) then
					visible = IsEntryVisible(entry._visible_callback_name_list)
					-- HACK: The 'Become Infamous' entry needs a workaround since this hook gets called before the user profile
					-- is loaded
					if entry ~= nil and entry._parameters ~= nil and entry._parameters.name ~= nil and entry._parameters.name == "become_infamous" then
						visible = true
					end
					if visible or dump_hidden_entries then
						count = count + 1
						if not first_subentry then
							file:write(",\n")
						end
						-- Setting of first_subentry to false is deferred to allow the translation code to access it
						if dump_translated_names then
							if not first_subentry then
								file:write("\n")
							end
							if entry._parameters.text_id ~= nil then
								file:write("\t\t-- " .. managers.localization:text(tostring(entry._parameters.text_id)) .. "\n")
							else
								file:write("\t\t-- <no translation for \"" .. tostring(entry._parameters.name) .. "\">\n")
							end
						end
						if visible then
							-- This entry is currently visible, ensure that the line is disabled by prefixing it with --
							file:write("--")
						end
						file:write("\t\t" .. tostring(entry._parameters.name) .. " = true")
						first_subentry = false
					end
				end
			end
			file:write("\n\t}")
		else
			log("[MainMenuStreamliner] Warning: mainmenunodes[\"" .. nodename .. "\"]._items is nil (node does not exist?), skipping")
		end
	end
	file:write("\n}\n")
	file:close()
	log("[MainMenuStreamliner] Dumped " .. tostring(count) .. " node entries to file \"" .. MainMenuStreamliner.NodeConfig .. "\"")
end)
